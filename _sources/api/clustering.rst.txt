.. _clustering:

Clustering
==========

Overview
--------

This API defines clustering is the automatic and unsupervised combination of 
unlabelled templates into groups of like templates. What constitutes likeness is
heavily dependent on the use case and context in question. One example when 
dealing with faces is grouping based on identity, where all faces belonging to a 
single individual are placed in a cluster.

Structs
-------

.. _JaniceClusterIds:

JaniceClusterIds
~~~~~~~~~~~~~~~~

A structure to represent a list of cluster ids objects.

Fields
^^^^^^

+--------+-------------+---------------------------------------+
|  Name  |    Type     |              Description              |
+========+=============+=======================================+
| ids    | uint64\_t\* | An array of cluster id objects.       |
+--------+-------------+---------------------------------------+
| length | size\_t     | The number of elements in :code:`ids` |
+--------+-------------+---------------------------------------+

.. _JaniceClusterIdsGroup:

JaniceClusterIdsGroup
~~~~~~~~~~~~~~~~~~~~~

A structure to represent a list of :ref:`JaniceClusterIds` objects.

Fields
^^^^^^

+--------+---------------------------+-----------------------------------------+
|  Name  |           Type            |               Description               |
+========+===========================+=========================================+
| group  | :ref:`JaniceClusterIds`\* | An array of cluster ids objects.        |
+--------+---------------------------+-----------------------------------------+
| length | size\_t                   | The number of elements in :code:`group` |
+--------+---------------------------+-----------------------------------------+

.. _JaniceClusterConfidences:

JaniceClusterConfidences
~~~~~~~~~~~~~~~~~~~~~~~~

A structure to represent a list of cluster confidence objects.

Fields
^^^^^^

+-------------+----------+-----------------------------------------------+
|    Name     |   Type   |                  Description                  |
+=============+==========+===============================================+
| confidences | double\* | An array of cluster confidence objects.       |
+-------------+----------+-----------------------------------------------+
| length      | size\_t  | The number of elements in :code:`confidences` |
+-------------+----------+-----------------------------------------------+

.. _JaniceClusterConfidencesGroup:

JaniceClusterConfidencesGroup
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A structure to represent a list of :ref:`JaniceClusterConfidences` objects.

Fields
^^^^^^

+--------+-----------------------------------+------------------------------------------+
|  Name  |               Type                |               Description                |
+========+===================================+==========================================+
| group  | :ref:`JaniceClusterConfidences`\* | An array of cluster confidences objects. |
+--------+-----------------------------------+------------------------------------------+
| length | size\_t                           | The number of elements in :code:`group`  |
+--------+-----------------------------------+------------------------------------------+

Function
--------

.. _janice_cluster_media:

janice\_cluster\_media
~~~~~~~~~~~~~~~~~~~~~~

Cluster a collection of media objects into groups. Each media object may
contain 0 or more objects of interest. The output is arranged so that each
output structure has :code:`N` sublists where :code:`N` is the number of input media
and the :code:`ith` sublist contains information for objects found in the :code:`ith`
media.

.. _cluster_confidence:

Cluster Confidence
^^^^^^^^^^^^^^^^^^

Along with a cluster assignment, this API supports the concept of a cluster
confidence. A cluster confidence is a value indicating a liklihood that the
object of interest actually belongs to a cluster. For example, one possible 
implementation of a cluster confidence is the negative distance of an object 
from the cluster centroid. One use case for this value, is for end users to
manually scrub cluster results by dynamically orphaning elements with lower
confidence values. The cluster confidence is subject to the following contraints:

1. A higher value indicates greater confidence of cluster membership
2. No meaning can be assigned to an individual confidence, it is only
   relevant when being compared with other confidences generated by
   the same algorithm.

Signature 
^^^^^^^^^

::

    JANICE_EXPORT JaniceError janice_cluster_media(const JaniceMediaIterators* media,
                                                   const JaniceContext* context,
                                                   JaniceClusterIdsGroup* cluster_ids,
                                                   JaniceClusterConfidencesGroup* cluster_confidences,
                                                   JaniceDetectionsGroup* detections);

Thread Safety 
^^^^^^^^^^^^^

This function is :ref:`reentrant`.

Parameters 
^^^^^^^^^^

+----------------------+----------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|         Name         |                  Type                  |                                                                                                                                                                                                                                                                                                                                                                          Description                                                                                                                                                                                                                                                                                                                                                                           |

| media                | const :ref:`JaniceMediaIterators`\*    | An array of media to cluster. After the function call, each iterator in the array will exist in an undefined state. A user should call :ref:`reset` on each iterator before reusing them|

| context              | const :ref:`JaniceContext`\*           | A context object with relevant hyperparameters set. Memory for the object should be managed by the user. The implementation should assume this points to a valid object|

| cluster\_ids         | :ref:`JaniceClusterIdsGroup`\*         | An output structure to hold cluster ids. Objects with the same cluster id are members of the same cluster. This structure must have :code:`N` sublists, where :code:`N` is the number of elements in :code:`media`. The :code:`ith` sublist contains cluster ids for all objects of interest found in the :code:`ith` media. If no objects of interest are found in a media then the corresponding sublist should have length 0. The user is responsible for allocating memory for the struct before the function call. The implementor is responsbile for allocating and filling internal members. The user is required to clear the struct by calling :ref:`janice_clear_cluster_ids_group`.                                                                 |

| cluster\_confidences | :ref:`JaniceClusterConfidencesGroup`\* | An output structure to hold :ref:`cluster_confidence`. This structure must have :code:`N` sublists, where :code:`N` is the number of elements in :code:`media`. The :code:`ith` sublist contains cluster confidences for all objects of interest found in the :code:`ith` media. The :code:`jth` confidence in the :code:`ith` sublist refers to the same object as the :code:`jth` id in the :code:`ith` sublist of :code:`ids`. The user is responsible for allocating memory for the struct before the function call. The implementor is responsbile for allocating and filling internal members. The user is required to clear the struct by calling :ref:`janice_clear_cluster_confidences_group`.                                                        |
+----------------------+----------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| detections           | :ref:`JaniceDetectionsGroup`\*         | Location information for each clustered object. This structure must have :code:`N` sublists, where :code:`N` is the number of elements in :code:`media`. The :code:`ith` sublist contains tracks for all objects of interest found in the :code:`ith` media. The :code:`jth` track in the :code:`ith` sublist refers to the same object as the :code:`jth` id in the :code:`ith` sublist of :code:`ids` and the :code:`jth` confidence in the :code:`ith` sublist of :code:`cluster_confidences`. The user is responsible for allocating memory for the struct before the function call. The implementor is responsbile for allocating and filling internal members. The user is required to clear the struct by calling :ref:`janice_clear_detections_group`. |


.. _janice_cluster_templates:

janice\_cluster\_templates 
~~~~~~~~~~~~~~~~~~~~~~~~~~

Cluster a collection of template objects into groups.

Signature 
^^^^^^^^^

::

    JANICE_EXPORT JaniceError janice_cluster_templates(const JaniceTemplates* tmpls,
                                                       const JaniceContext* context,
                                                       JaniceClusterIds* cluster_ids,
                                                       JaniceClusterConfidences* cluster_confidences);

Thread Safety 
^^^^^^^^^^^^^

This function is :ref:`reentrant`.

Parameters 
^^^^^^^^^^


|         Name         |               Type                |                                                                                                                                                                                                                                                                                            Description                                                                                                                                                                                                                                                                                             |

| tmpls                | const :ref:`JaniceTemplates`\*    | An array of templates to cluster. Each template was created with the :code:`JaniceCluster` role.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |

| context              | const :ref:`JaniceContext`\*      | A context object with relevant hyperparameters set. Memory for the object should be managed by the user. The implementation should assume this points to a valid object.                                                                                                                                                                                                                                                                                                                                                                                                                           |

| cluster\_ids         | :ref:`JaniceClusterIds`\*         | An output structure to hold cluster ids. Templates assigned the same cluster id are members of the same cluster. This structure must have the same number of elements as :code:`tmpls`. The :code:`ith` cluster id corresponds to the :code:`ith` template object. Objects that can't be clustered should be assigned a unique cluster id. The user is responsible for allocating memory for the struct before the function call. The implementor is responsbile for allocating and filling internal members. The user is required to clear the struct by calling :ref:`janice_clear_cluster_ids`. |

| cluster\_confidences | :ref:`JaniceClusterConfidences`\* | An output structure to hold :ref:`cluster_confidence`. This structure must have the same number of elements as :code:`tmpls`. The :code:`ith` cluster confidence corresponds to the :code:`ith` template object. The user is responsible for allocating memory for the struct before the function call. The implementor is responsbile for allocating and filling internal members. The user is required to clear the struct by calling :ref:`janice_clear_cluster_confidences`.                                                                                                                   |


.. _janice_clear_cluster_ids:

janice\_clear\_cluster\_ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Free any memory associated with a of :ref:`JaniceClusterIds` object.

Signature
^^^^^^^^^

::

    JANICE_EXPORT JaniceError janice_clear_cluster_ids(JaniceClusterIds* ids);

Thread Safety
^^^^^^^^^^^^^

This function is :ref:`reentrant`.

Parameters
^^^^^^^^^^

+------+---------------------------+--------------------------------+
| Name |           Type            |          Description           |
+======+===========================+================================+
| ids  | :ref:`JaniceClusterIds`\* | A cluster ids object to clear. |
+------+---------------------------+--------------------------------+

.. _janice_clear_cluster_ids_group:

janice\_clear\_cluster\_ids\_group
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Free any memory associated with a :ref:`JaniceClusterIdsGroup` object.

Signature
^^^^^^^^^

::

    JANICE_EXPORT JaniceError janice_clear_cluster_ids_group(JaniceClusterIdsGroup* group);

Parameters
^^^^^^^^^^

+-------+--------------------------------+-------------------------------+
| Name  |              Type              |          Description          |
+=======+================================+===============================+
| group | :ref:`JaniceClusterIdsGroup`\* | A cluster ids group to clear. |
+-------+--------------------------------+-------------------------------+

.. _janice_clear_cluster_confidences:

janice\_clear\_cluster\_confidences
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Free any memory associated with a of :ref:`JaniceClusterConfidences` object.

Signature
^^^^^^^^^

::

    JANICE_EXPORT JaniceError janice_clear_cluster_confidences(JaniceClusterConfidences* confidences);

Thread Safety
^^^^^^^^^^^^^

This function is :ref:`reentrant`.

Parameters
^^^^^^^^^^

+-------------+-----------------------------------+----------------------------------------+
|    Name     |               Type                |              Description               |
+=============+===================================+========================================+
| confidences | :ref:`JaniceClusterConfidences`\* | A cluster confidences object to clear. |
+-------------+-----------------------------------+----------------------------------------+

.. _janice_clear_cluster_confidences_group:

janice\_clear\_cluster\_confidences\_group
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Free any memory associated with a :ref:`JaniceClusterConfidencesGroup` object.

Signature
^^^^^^^^^

::

    JANICE_EXPORT JaniceError janice_clear_cluster_confidences_group(JaniceClusterConfidencesGroup* group);

Parameters
^^^^^^^^^^

+-------+----------------------------------------+---------------------------------------+
| Name  |                  Type                  |              Description              |
+=======+========================================+=======================================+
| group | :ref:`JaniceClusterConfidencesGroup`\* | A cluster confidences group to clear. |
+-------+----------------------------------------+---------------------------------------+